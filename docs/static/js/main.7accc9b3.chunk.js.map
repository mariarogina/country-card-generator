{"version":3,"sources":["components/Country.jsx","components/randomSelector.jsx","components/FetchCountry.jsx","App.js","reportWebVitals.js","index.js"],"names":["Country","props","className","item","name","common","capital","Object","values","languages","join","region","src","flags","png","RandomSelector","rowList","list","useState","randItem","setRandItem","id","style","backgroundColor","color","length","width","fontSize","onClick","i","parseInt","Math","random","FetchCountry","setRowList","useEffect","fetch","then","response","json","data","console","log","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAEe,SAASA,EAAQC,GAAQ,IAAD,MACrC,OACE,sBAAKC,UAAU,gBAAf,UACE,6BAAKD,EAAME,KAAKC,KAAKC,SACrB,2CAAcJ,EAAME,KAAKG,WAEzB,uBACA,kCAAI,2CAAJ,IAAuBC,OAAOC,OAAP,UAAcP,EAAME,YAApB,aAAc,EAAYM,WAAWC,KAAK,SACjE,8BAAG,wCAAH,cAAmBT,EAAME,YAAzB,aAAmB,EAAYQ,UAE/B,qBAAKT,UAAU,WAAWU,IAAG,UAAEX,EAAME,KAAKU,aAAb,aAAE,EAAkBC,SCRxC,SAASC,EAAed,GACrC,IAAMe,EAAUf,EAAMgB,KAEtB,EAAgCC,mBAASF,EAAQ,IAAjD,mBAAOG,EAAP,KAAiBC,EAAjB,KAOA,OACE,sBAAKlB,UAAU,OAAOmB,GAAG,OAAzB,UACE,sBAAKnB,UAAU,WAAf,UACE,oBAAIA,UAAU,YAAYoB,MAAO,CAACC,gBAAgB,UAAWC,MAAM,WAAnE,iCACA,uBAEA,yDAA4BR,EAAQS,UACpC,uBAEA,wBAAQvB,UAAU,kBAAkBoB,MAAO,CAACI,MAAM,QAASC,SAAS,UAAUC,QAd9D,WACpB,IAAIC,EAAIC,SAASC,KAAKC,UAAYhB,EAAQS,OAAS,IACnDL,EAAYJ,EAAQa,KAYhB,4BAGA,uBACA,uBACA,qBAAK3B,UAAU,WAAf,SACgB,KAAbiB,EAAkB,KAAO,cAACnB,EAAD,CAASG,KAAMgB,SAG7C,uBACA,0BC9BS,SAASc,IACtB,MAA8Bf,mBAAS,MAAvC,mBAAOF,EAAP,KAAgBkB,EAAhB,KAsBA,OAfAC,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZN,EACEM,EAAKG,KAAI,SAACxC,GAAD,OAbCC,EAcGD,EAAKC,KAdFE,EAcQH,EAAKG,QAdJG,EAcaN,EAAKM,UAdPI,EAckBV,EAAKU,MAdhBF,EAcuBR,EAAKQ,OAbtE,CAAEP,OAAME,UAASG,YAAWI,QAAOF,UAD9C,IAAoBP,EAAME,EAASG,EAAWI,EAAOF,WAkBhD,IAEEK,GAILyB,QAAQC,IAAI1B,GAEL,cAACD,EAAD,CAAgBE,KAAMD,KALpB,gDCfI4B,MARf,WACE,OACE,8BACE,cAACX,EAAD,OCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7accc9b3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Country(props) {\r\n  return (\r\n    <div className=\"col cardStyle\">\r\n      <h1>{props.item.name.common}</h1>\r\n      <h2>Capital: {props.item.capital}</h2>\r\n\r\n      <br />\r\n      <p> <b>Languages:</b> {Object.values(props.item?.languages).join(\", \")}</p>\r\n      <p><b>Region:</b> {props.item?.region}</p>\r\n\r\n      <img className=\"picStyle\" src={props.item.flags?.png} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Country from \"./Country\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function RandomSelector(props) {\r\n  const rowList = props.list;\r\n\r\n  const [randItem, setRandItem] = useState(rowList[1]);\r\n\r\n  const returnCountry = () => {\r\n    var i = parseInt(Math.random() * (rowList.length - 1));\r\n    setRandItem(rowList[i]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"back\" id=\"root\">\r\n      <div className=\"centered\">\r\n        <h1 className=\"cardStyle\" style={{backgroundColor:\"#d6f5d6\", color:\"#626258\"}}>Random Country Card</h1>\r\n        <br />\r\n\r\n        <h2>Total number of cards: {rowList.length}</h2>\r\n        <br />\r\n\r\n        <button className=\"btn btn-success\" style={{width:\"200px\", fontSize:\"1.4rem\"}}onClick={returnCountry}>\r\n          Pick a country\r\n        </button>\r\n        <br />\r\n        <br />\r\n        <div className=\"centered\">\r\n          {randItem === \"\" ? null : <Country item={randItem} />}\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RandomSelector from \"./randomSelector\";\r\n\r\nexport default function FetchCountry() {\r\n  const [rowList, setRowList] = useState(null);\r\n  \r\nfunction createData(name, capital, languages, flags, region) {\r\n    return { name, capital, languages, flags, region };\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    fetch(\"https://restcountries.com/v3.1/all\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        setRowList(\r\n          data.map((item) =>\r\n            createData(item.name, item.capital, item.languages, item.flags, item.region)\r\n          )\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  if (!rowList) {\r\n    return <div>Still Loading</div>;\r\n  }\r\n\r\n  console.log(rowList);\r\n\r\n  return <RandomSelector list={rowList} />;\r\n}","\nimport './App.css';\nimport FetchCountry from './components/FetchCountry';\n\nfunction App() {\n  return (\n    <div>\n      <FetchCountry/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}